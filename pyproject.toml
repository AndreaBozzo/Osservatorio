[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "osservatorio-istat"
version = "1.0.0"
description = "Modern Italian Statistical Data Platform with Advanced Analytics, FastAPI REST API, and Business Intelligence Integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Andrea Bozzo", email = "andrea.bozzo@osservatorio-istat.it"}
]
maintainers = [
    {name = "Andrea Bozzo", email = "andrea.bozzo@osservatorio-istat.it"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Database",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Office/Business :: Financial :: Investment",
    "Framework :: FastAPI",
    "Environment :: Web Environment",
]
keywords = [
    "istat", "data-processing", "powerbi", "tableau", "fastapi", "analytics",
    "business-intelligence", "statistical-data", "rest-api", "duckdb", "sqlite"
]
requires-python = ">=3.9"
dependencies = [
    # Core data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",

    # Database dependencies (Database Foundation Sprint)
    "duckdb>=0.9.0",
    "psycopg2-binary>=2.9.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",

    # XML/HTML processing
    "lxml>=4.9.0",
    "beautifulsoup4>=4.12.0",

    # File formats
    "openpyxl>=3.1.0",
    "pyarrow>=13.0.0",

    # Dashboard and visualization
    "streamlit>=1.32.0",
    "plotly>=5.17.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",

    # FastAPI and web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",

    # API clients
    "tableauserverclient>=0.25",
    "msal>=1.24.0",

    # Authentication and security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",

    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "tqdm>=4.65.0",
    "loguru>=0.7.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-env>=1.1.0",
    "hypothesis>=6.82.0",

    # Code quality
    "black>=23.7.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "mypy>=1.5.0",
    "ruff>=0.0.290",

    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",

    # Development tools
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

performance = [
    "locust>=2.16.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "line-profiler>=4.1.0",
]

security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.38.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interaction",
    "performance: Performance and scalability tests",
    "slow: Slow running tests",
    "api: Tests requiring API access",
    "security: Security-related tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::ResourceWarning",
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "tests"]

[tool.pylance]
typeCheckingMode = "basic"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "numpy.*",
    "duckdb.*",
    "streamlit.*",
    "plotly.*",
    "matplotlib.*",
    "seaborn.*",
    "tableauserverclient.*",
    "msal.*",
    "lxml.*",
    "beautifulsoup4.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise-without-from-inside-except (many legacy patterns)
    "B017",  # pytest.raises(Exception) (acceptable in tests)
    "B007",  # unused-loop-control-variable (often intentional)
    "B015",  # useless-comparison (legacy benchmark code)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]
"scripts/legacy/**" = ["F401", "E402"]  # legacy scripts can have import issues
"scripts/benchmark_*" = ["B015"]  # benchmark scripts may have unused comparisons
"src/api/fastapi_app.py" = ["E402"]  # router imports after app definition

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/dist-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[project.urls]
Homepage = "https://github.com/AndreaBozzo/Osservatorio"
Repository = "https://github.com/AndreaBozzo/Osservatorio.git"
Documentation = "https://github.com/AndreaBozzo/Osservatorio/blob/main/README.md"
"Bug Tracker" = "https://github.com/AndreaBozzo/Osservatorio/issues"
Changelog = "https://github.com/AndreaBozzo/Osservatorio/blob/main/CHANGELOG.md"

[project.scripts]
osservatorio = "src.api.fastapi_app:main"
osservatorio-health = "scripts.health_check:main"
