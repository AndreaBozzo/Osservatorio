# Default values for osservatorio-dataflow-analyzer
# This is a YAML-formatted file declaring default values for your chart.

# Global configuration
global:
  # Global image registry (override individual image registries)
  imageRegistry: ""
  # Global image pull secrets
  imagePullSecrets: []
  # Global storage class
  storageClass: ""

# Application configuration
app:
  name: dataflow-analyzer
  version: "2.0.0"
  environment: development

# Image configuration
image:
  registry: docker.io
  repository: osservatorio/dataflow-analyzer
  tag: "2.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  # Number of replicas
  replicaCount: 3

  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

  # Pod annotations
  podAnnotations: {}

  # Pod labels
  podLabels: {}

  # Security context for pods
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  # Security context for containers
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true

  # Node selector
  nodeSelector: {}

  # Tolerations
  tolerations: []

  # Affinity rules
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - dataflow-analyzer
          topologyKey: kubernetes.io/hostname

# Resource configuration
resources:
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeralStorage: 1Gi
  limits:
    cpu: 1500m
    memory: 2Gi
    ephemeralStorage: 2Gi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  # Custom metrics (optional)
  customMetrics: []

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  # Additional ports
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: metrics
      port: 8001
      targetPort: 8001
      protocol: TCP
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: dataflow-analyzer.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Storage configuration
storage:
  # Storage classes
  storageClasses:
    fastSsd:
      name: osservatorio-fast-ssd
      provisioner: kubernetes.io/no-provisioner
      reclaimPolicy: Retain
      allowVolumeExpansion: true
    standard:
      name: osservatorio-standard
      provisioner: kubernetes.io/no-provisioner
      reclaimPolicy: Retain
      allowVolumeExpansion: true
    backup:
      name: osservatorio-backup
      provisioner: kubernetes.io/no-provisioner
      reclaimPolicy: Retain
      allowVolumeExpansion: true

  # Persistent volumes
  persistence:
    database:
      enabled: true
      storageClass: osservatorio-fast-ssd
      size: 20Gi
      accessModes:
        - ReadWriteOnce
    cache:
      enabled: true
      storageClass: osservatorio-fast-ssd
      size: 10Gi
      accessModes:
        - ReadWriteOnce
    backup:
      enabled: true
      storageClass: osservatorio-backup
      size: 100Gi
      accessModes:
        - ReadWriteMany

# Health check configuration
healthChecks:
  startup:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    path: /health/startup
    port: http
  liveness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    path: /health/live
    port: http
  readiness:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
    path: /health/ready
    port: http

# Environment variables
env:
  # Database configuration
  database:
    url: "sqlite:///data/db/osservatorio.db"

  # Redis configuration
  redis:
    host: "localhost"
    port: 6379
    db: 0

  # Application configuration
  logLevel: "INFO"
  enableDebug: false
  enableMetrics: true
  enableTracing: true
  enableCircuitBreaker: true
  enableDistributedCaching: true

# Secret configuration
secrets:
  # Create secrets automatically
  create: true
  # Secret annotations
  annotations: {}
  # Secret data (will be base64 encoded automatically)
  data:
    databaseUrl: "sqlite:///data/db/osservatorio.db"
    redisPassword: ""
    jwtSecret: "your-secret-key-here"
    istatApiKey: ""

# ConfigMap configuration
configMap:
  # Create configmap automatically
  create: true
  # ConfigMap annotations
  annotations: {}
  # ConfigMap data
  data:
    # Application configuration file
    app.yaml: |
      app:
        name: dataflow-analyzer
        version: 2.0.0
        environment: production

      logging:
        level: INFO
        format: json

      metrics:
        enabled: true
        port: 8001
        path: /metrics

      health:
        startup_timeout: 30
        liveness_timeout: 5
        readiness_timeout: 5

# RBAC configuration
rbac:
  # Create RBAC resources
  create: true
  # Service account configuration
  serviceAccount:
    create: true
    automountServiceAccountToken: true
    annotations: {}
    name: ""

# Network policies
networkPolicy:
  enabled: false
  ingress:
    enabled: true
    from: []
  egress:
    enabled: true
    to: []

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM
  timeZone: "Europe/Rome"
  retention:
    days: 30
  image:
    registry: docker.io
    repository: osservatorio/backup-utils
    tag: "1.0.0"
    pullPolicy: IfNotPresent

# Monitoring configuration
monitoring:
  # ServiceMonitor for Prometheus
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

  # Grafana dashboard
  grafana:
    enabled: false
    dashboardConfigMap: ""

# Redis configuration (if external Redis is used)
redis:
  enabled: false
  # External Redis configuration
  external:
    host: ""
    port: 6379
    password: ""
    database: 0

# Environment-specific overrides
environments:
  development:
    replicaCount: 1
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    env:
      logLevel: "DEBUG"
      enableDebug: true

  staging:
    replicaCount: 2
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      limits:
        cpu: 750m
        memory: 1Gi
    env:
      logLevel: "INFO"
      enableDebug: false

  production:
    replicaCount: 3
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1500m
        memory: 2Gi
    env:
      logLevel: "WARNING"
      enableDebug: false
