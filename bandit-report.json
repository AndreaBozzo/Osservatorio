{
  "errors": [],
  "generated_at": "2025-08-01T23:28:32Z",
  "metrics": {
    "_totals": {
      "CONFIDENCE.HIGH": 20,
      "CONFIDENCE.LOW": 21,
      "CONFIDENCE.MEDIUM": 2,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 15,
      "SEVERITY.MEDIUM": 28,
      "SEVERITY.UNDEFINED": 0,
      "loc": 18914,
      "nosec": 0,
      "skipped_tests": 2
    },
    "src/analyzers\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\dataflow_analysis_api.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 588,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\dependencies.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 283,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\fastapi_app.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 735,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\mock_istat_data.py": {
      "CONFIDENCE.HIGH": 9,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 9,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 253,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\models.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 358,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\odata.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 648,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\powerbi_api.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 375,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\production_istat_client.py": {
      "CONFIDENCE.HIGH": 4,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 534,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\security_dashboard.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 507,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/api\\tableau_api.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 182,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 11,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\enhanced_rate_limiter.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 730,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\jwt_manager.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 427,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\models.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 44,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\rate_limiter.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 467,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\security_config.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 294,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\security_middleware.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 318,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/auth\\sqlite_auth.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 399,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/converters\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/converters\\base_converter.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 294,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/converters\\factory.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 59,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/converters\\powerbi_converter.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 571,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/converters\\tableau_converter.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 637,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 55,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 58,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\config.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 150,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\manager.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 349,
      "nosec": 0,
      "skipped_tests": 1
    },
    "src/database\\duckdb\\partitioning.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 3,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 3,
      "SEVERITY.UNDEFINED": 0,
      "loc": 449,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\query_builder.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 683,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\query_optimizer.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 4,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 4,
      "SEVERITY.UNDEFINED": 0,
      "loc": 470,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\schema.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 6,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 6,
      "SEVERITY.UNDEFINED": 0,
      "loc": 459,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\duckdb\\simple_adapter.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 365,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\sqlite\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 34,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\sqlite\\dataset_config.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 3,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 3,
      "SEVERITY.UNDEFINED": 0,
      "loc": 299,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\sqlite\\manager.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 3,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 3,
      "SEVERITY.UNDEFINED": 0,
      "loc": 904,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\sqlite\\repository.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 590,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/database\\sqlite\\schema.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 522,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/integrations\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 18,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/integrations\\powerbi\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 27,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/integrations\\powerbi\\incremental.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 433,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/integrations\\powerbi\\metadata_bridge.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 472,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/integrations\\powerbi\\optimizer.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 334,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/integrations\\powerbi\\templates.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 576,
      "nosec": 0,
      "skipped_tests": 1
    },
    "src/services\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 25,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/services\\dataflow_analysis_service.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 728,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/services\\models.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 217,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/services\\service_factory.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 254,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 0,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\circuit_breaker.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 218,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\config.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 163,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\error_handler.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 232,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\logger.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 21,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\secure_path.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 284,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\security_enhanced.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 301,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\structured_logger.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 324,
      "nosec": 0,
      "skipped_tests": 0
    },
    "src/utils\\temp_file_manager.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 186,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "898         \"src.api.fastapi_app:app\",\n899         host=\"0.0.0.0\",\n900         port=8000,\n",
      "col_offset": 13,
      "end_col_offset": 22,
      "filename": "src/api\\fastapi_app.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 605,
        "link": "https://cwe.mitre.org/data/definitions/605.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible binding to all interfaces.",
      "line_number": 899,
      "line_range": [
        899
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b104_hardcoded_bind_all_interfaces.html",
      "test_id": "B104",
      "test_name": "hardcoded_bind_all_interfaces"
    },
    {
      "code": "11 import random\n12 import xml.etree.ElementTree as ET\n13 from dataclasses import dataclass\n",
      "col_offset": 0,
      "end_col_offset": 34,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 12,
      "line_range": [
        12
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "232         for i in range(sample_count):\n233             territory = random.choice(self.territories)\n234             year = random.choice([2021, 2022, 2023])\n",
      "col_offset": 24,
      "end_col_offset": 55,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 233,
      "line_range": [
        233
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "233             territory = random.choice(self.territories)\n234             year = random.choice([2021, 2022, 2023])\n235 \n",
      "col_offset": 19,
      "end_col_offset": 52,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 234,
      "line_range": [
        234
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "236             if \"POPULATION\" in dataset_info.id:\n237                 value = random.randint(50000, 5000000)\n238             elif \"EMPLOYMENT\" in dataset_info.id:\n",
      "col_offset": 24,
      "end_col_offset": 54,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 237,
      "line_range": [
        237
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "238             elif \"EMPLOYMENT\" in dataset_info.id:\n239                 value = round(random.uniform(45.0, 85.0), 1)  # Employment rate %\n240             elif \"GDP\" in dataset_info.id:\n",
      "col_offset": 30,
      "end_col_offset": 56,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 239,
      "line_range": [
        239
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "240             elif \"GDP\" in dataset_info.id:\n241                 value = random.randint(20000, 150000)  # GDP per capita\n242             elif \"BUSINESS\" in dataset_info.id:\n",
      "col_offset": 24,
      "end_col_offset": 53,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 241,
      "line_range": [
        241
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "242             elif \"BUSINESS\" in dataset_info.id:\n243                 value = round(random.uniform(-5.0, 15.0), 2)  # Business indicator %\n244             elif \"TOURISM\" in dataset_info.id:\n",
      "col_offset": 30,
      "end_col_offset": 56,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 243,
      "line_range": [
        243
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "244             elif \"TOURISM\" in dataset_info.id:\n245                 value = random.randint(1000, 500000)  # Tourist arrivals\n246             else:\n",
      "col_offset": 24,
      "end_col_offset": 52,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 245,
      "line_range": [
        245
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "246             else:\n247                 value = round(random.uniform(0, 1000), 2)\n248 \n",
      "col_offset": 30,
      "end_col_offset": 53,
      "filename": "src/api\\mock_istat_data.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 247,
      "line_range": [
        247
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "20 from typing import Any, Dict, List, Optional, Union\n21 from xml.etree.ElementTree import Element, SubElement, tostring\n22 \n",
      "col_offset": 0,
      "end_col_offset": 63,
      "filename": "src/api\\odata.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using Element to parse untrusted XML data is known to be vulnerable to XML attacks. Replace Element with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 21,
      "line_range": [
        21
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "360             with safe_file as file:\n361                 response = requests.post(\n362                     f\"{self.base_url}/groups/{workspace_id}/imports\",\n363                     headers=headers,\n364                     files={\"file\": file},\n365                     params={\"datasetDisplayName\": dataset_name},\n366                 )\n367                 response.raise_for_status()\n",
      "col_offset": 27,
      "end_col_offset": 17,
      "filename": "src/api\\powerbi_api.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Requests call without timeout",
      "line_number": 361,
      "line_range": [
        361,
        362,
        363,
        364,
        365,
        366
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "10 import time\n11 import xml.etree.ElementTree as ET\n12 from dataclasses import dataclass\n",
      "col_offset": 0,
      "end_col_offset": 34,
      "filename": "src/api\\production_istat_client.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 11,
      "line_range": [
        11
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "305             # Parse XML response\n306             root = ET.fromstring(response.content)\n307             dataflows = []\n",
      "col_offset": 19,
      "end_col_offset": 50,
      "filename": "src/api\\production_istat_client.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 306,
      "line_range": [
        306
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "396                         try:\n397                             root = ET.fromstring(data_response.content)\n398                             observations = root.findall('.//*[local-name()=\"Obs\"]')\n",
      "col_offset": 35,
      "end_col_offset": 71,
      "filename": "src/api\\production_istat_client.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 397,
      "line_range": [
        397
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "556                 # Full repository integration with SQLite + DuckDB\n557                 from xml.etree.ElementTree import fromstring as parse_xml\n558 \n",
      "col_offset": 16,
      "end_col_offset": 73,
      "filename": "src/api\\production_istat_client.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace fromstring with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 557,
      "line_range": [
        557
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "266 \n267             return AuthToken(\n268                 access_token=access_token,\n269                 token_type=\"bearer\",\n270                 expires_in=expires_in,\n271                 refresh_token=refresh_token,\n272                 scope=\" \".join(api_key.scopes),\n273             )\n274 \n",
      "col_offset": 19,
      "end_col_offset": 13,
      "filename": "src/auth\\jwt_manager.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: 'bearer'",
      "line_number": 267,
      "line_range": [
        267,
        268,
        269,
        270,
        271,
        272,
        273
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "7 import re\n8 import xml.etree.ElementTree as ET\n9 from abc import ABC, abstractmethod\n",
      "col_offset": 0,
      "end_col_offset": 34,
      "filename": "src/converters\\base_converter.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 8,
      "line_range": [
        8
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "73         try:\n74             tree = ET.parse(xml_file)\n75             root = tree.getroot()\n",
      "col_offset": 19,
      "end_col_offset": 37,
      "filename": "src/converters\\base_converter.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "149             # Parse XML content\n150             root = ET.fromstring(xml_content)\n151 \n",
      "col_offset": 19,
      "end_col_offset": 45,
      "filename": "src/converters\\base_converter.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 150,
      "line_range": [
        150
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "343 \n344         query = f\"\"\"\n345         SELECT DISTINCT partition_key\n346         FROM {schema}.istat_datasets_partitioned\n347         ORDER BY partition_key;\n348         \"\"\"\n349 \n",
      "col_offset": 20,
      "end_col_offset": 13,
      "filename": "src/database\\duckdb\\partitioning.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 344,
      "line_range": [
        344,
        345,
        346,
        347,
        348
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "361 \n362         view_sql = f\"\"\"\n363         CREATE OR REPLACE VIEW {view_name} AS\n364         SELECT\n365             d.*,\n366             o.obs_value,\n367             o.obs_status,\n368             o.value_type,\n369             o.is_estimated,\n370             o.is_provisional\n371         FROM {schema}.istat_datasets_partitioned d\n372         LEFT JOIN {schema}.istat_observations_partitioned o ON d.id = o.dataset_row_id\n373         WHERE d.partition_key = '{partition_key}';\n374         \"\"\"\n375 \n",
      "col_offset": 23,
      "end_col_offset": 31,
      "filename": "src/database\\duckdb\\partitioning.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 362,
      "line_range": [
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "520         try:\n521             stats_query = f\"\"\"\n522             SELECT\n523                 partition_key,\n524                 COUNT(*) as row_count,\n525                 MIN(year) as min_year,\n526                 MAX(year) as max_year,\n527                 COUNT(DISTINCT territory_code) as territory_count\n528             FROM {table}\n529             GROUP BY partition_key\n530             ORDER BY row_count DESC;\n531             \"\"\"\n532 \n",
      "col_offset": 30,
      "end_col_offset": 17,
      "filename": "src/database\\duckdb\\partitioning.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 521,
      "line_range": [
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        528,
        529,
        530,
        531
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "138 \n139         query = f\"\"\"\n140         SELECT\n141             ts.dataset_id,\n142             ts.year,\n143             ts.time_period,\n144             ts.territory_code,\n145             ts.territory_name,\n146             ts.measure_code,\n147             ts.measure_name,\n148             ts.obs_value,\n149             ts.obs_status,\n150             ts.category,\n151             ts.unit_of_measure\n152         FROM {analytics_schema}.time_series ts\n153         WHERE ts.dataset_id IN ('{dataset_list}')\n154           AND ts.year BETWEEN {start_year} AND {end_year}\n155           {territory_filter}\n156         ORDER BY ts.dataset_id, ts.year, ts.territory_code;\n157         \"\"\"\n158 \n",
      "col_offset": 20,
      "end_col_offset": 13,
      "filename": "src/database\\duckdb\\query_optimizer.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 139,
      "line_range": [
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "203 \n204         query = f\"\"\"\n205         WITH territory_stats AS (\n206             SELECT\n207                 d.territory_code,\n208                 d.territory_name,\n209                 d.measure_code,\n210                 d.measure_name,\n211                 AVG(o.obs_value) as avg_value,\n212                 MIN(o.obs_value) as min_value,\n213                 MAX(o.obs_value) as max_value,\n214                 COUNT(o.obs_value) as obs_count,\n215                 STDDEV(o.obs_value) as std_dev\n216             FROM {schema}.istat_datasets d\n217             JOIN {schema}.istat_observations o ON d.id = o.dataset_row_id\n218             WHERE d.year = {year}\n219               AND d.measure_code IN ('{measure_list}')\n220               {territory_filter}\n221               AND o.obs_value IS NOT NULL\n222             GROUP BY d.territory_code, d.territory_name, d.measure_code, d.measure_name\n223         )\n224         SELECT\n225             *,\n226             RANK() OVER (PARTITION BY measure_code ORDER BY avg_value DESC) as value_rank,\n227             NTILE(4) OVER (PARTITION BY measure_code ORDER BY avg_value) as quartile\n228         FROM territory_stats\n229         ORDER BY measure_code, value_rank;\n230         \"\"\"\n231 \n",
      "col_offset": 20,
      "end_col_offset": 17,
      "filename": "src/database\\duckdb\\query_optimizer.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 204,
      "line_range": [
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "264 \n265         query = f\"\"\"\n266         WITH yearly_aggregates AS (\n267             SELECT\n268                 m.category,\n269                 d.year,\n270                 COUNT(DISTINCT d.dataset_id) as dataset_count,\n271                 COUNT(o.obs_value) as total_observations,\n272                 AVG(o.obs_value) as avg_value,\n273                 MEDIAN(o.obs_value) as median_value,\n274                 STDDEV(o.obs_value) as std_dev\n275             FROM {schema}.dataset_metadata m\n276             JOIN {schema}.istat_datasets d ON m.dataset_id = d.dataset_id\n277             JOIN {schema}.istat_observations o ON d.id = o.dataset_row_id\n278             WHERE m.category IN ('{category_list}')\n279               AND d.year BETWEEN {start_year} AND {end_year}\n280               AND o.obs_value IS NOT NULL\n281             GROUP BY m.category, d.year\n282         ),\n283         trend_calculations AS (\n284             SELECT\n285                 *,\n286                 LAG(avg_value) OVER (PARTITION BY category ORDER BY year) as prev_avg_value,\n287                 LEAD(avg_value) OVER (PARTITION BY category ORDER BY year) as next_avg_value\n288             FROM yearly_aggregates\n289         )\n290         SELECT\n291             *,\n292             CASE\n293                 WHEN prev_avg_value IS NULL THEN NULL\n294                 ELSE ((avg_value - prev_avg_value) / prev_avg_value) * 100\n295             END as year_over_year_change,\n296             CASE\n297                 WHEN ROW_NUMBER() OVER (PARTITION BY category ORDER BY year) >= 3 THEN\n298                     AVG(avg_value) OVER (\n299                         PARTITION BY category\n300                         ORDER BY year\n301                         ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n302                     )\n303             END as moving_avg_3yr\n304         FROM trend_calculations\n305         ORDER BY category, year;\n306         \"\"\"\n307 \n",
      "col_offset": 20,
      "end_col_offset": 17,
      "filename": "src/database\\duckdb\\query_optimizer.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 265,
      "line_range": [
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "338 \n339         query = f\"\"\"\n340         SELECT\n341             d.territory_code,\n342             d.territory_name,\n343             d.measure_code,\n344             d.measure_name,\n345             AVG(o.obs_value) as avg_value,\n346             COUNT(o.obs_value) as obs_count,\n347             m.unit_of_measure,\n348             RANK() OVER (ORDER BY AVG(o.obs_value) DESC) as rank\n349         FROM {schema}.dataset_metadata m\n350         JOIN {schema}.istat_datasets d ON m.dataset_id = d.dataset_id\n351         JOIN {schema}.istat_observations o ON d.id = o.dataset_row_id\n352         WHERE m.category = '{category}'\n353           AND d.measure_code = '{measure_code}'\n354           AND d.year = {year}\n355           AND o.obs_value IS NOT NULL\n356         GROUP BY d.territory_code, d.territory_name, d.measure_code,\n357                  d.measure_name, m.unit_of_measure\n358         ORDER BY avg_value DESC\n359         LIMIT {limit};\n360         \"\"\"\n361 \n",
      "col_offset": 20,
      "end_col_offset": 13,
      "filename": "src/database\\duckdb\\query_optimizer.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 339,
      "line_range": [
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "269         # Create analytics view for common aggregations\n270         view_sql = f\"\"\"\n271         CREATE OR REPLACE VIEW {analytics_schema}.dataset_summary AS\n272         SELECT\n273             m.dataset_id,\n274             m.dataset_name,\n275             m.category,\n276             m.priority,\n277             COUNT(o.id) as total_observations,\n278             MIN(d.year) as min_year,\n279             MAX(d.year) as max_year,\n280             COUNT(DISTINCT d.territory_code) as territory_count,\n281             AVG(o.obs_value) as avg_value,\n282             MIN(o.obs_value) as min_value,\n283             MAX(o.obs_value) as max_value,\n284             m.completeness_score,\n285             m.data_quality_score,\n286             m.updated_at\n287         FROM {main_schema}.dataset_metadata m\n288         LEFT JOIN {main_schema}.istat_datasets d ON m.dataset_id = d.dataset_id\n289         LEFT JOIN {main_schema}.istat_observations o ON d.id = o.dataset_row_id\n290         GROUP BY m.dataset_id, m.dataset_name, m.category, m.priority,\n291                  m.completeness_score, m.data_quality_score, m.updated_at;\n292         \"\"\"\n293 \n",
      "col_offset": 23,
      "end_col_offset": 31,
      "filename": "src/database\\duckdb\\schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 270,
      "line_range": [
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "296         # Create time series view\n297         time_series_view = f\"\"\"\n298         CREATE OR REPLACE VIEW {analytics_schema}.time_series AS\n299         SELECT\n300             d.dataset_id,\n301             d.year,\n302             d.time_period,\n303             d.territory_code,\n304             d.territory_name,\n305             d.measure_code,\n306             d.measure_name,\n307             o.obs_value,\n308             o.obs_status,\n309             m.category,\n310             m.unit_of_measure\n311         FROM {main_schema}.istat_datasets d\n312         JOIN {main_schema}.istat_observations o ON d.id = o.dataset_row_id\n313         JOIN {main_schema}.dataset_metadata m ON d.dataset_id = m.dataset_id\n314         WHERE o.obs_value IS NOT NULL\n315         ORDER BY d.dataset_id, d.year, d.time_period;\n316         \"\"\"\n317 \n",
      "col_offset": 31,
      "end_col_offset": 31,
      "filename": "src/database\\duckdb\\schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 297,
      "line_range": [
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "320         # Create territory aggregation view\n321         territory_view = f\"\"\"\n322         CREATE OR REPLACE VIEW {analytics_schema}.territory_aggregates AS\n323         SELECT\n324             d.territory_code,\n325             d.territory_name,\n326             d.year,\n327             m.category,\n328             COUNT(*) as indicator_count,\n329             AVG(o.obs_value) as avg_value,\n330             SUM(CASE WHEN o.obs_value IS NOT NULL THEN 1 ELSE 0 END) as non_null_count,\n331             COUNT(*) as total_count,\n332             (SUM(CASE WHEN o.obs_value IS NOT NULL THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) as completeness_pct\n333         FROM {main_schema}.istat_datasets d\n334         JOIN {main_schema}.istat_observations o ON d.id = o.dataset_row_id\n335         JOIN {main_schema}.dataset_metadata m ON d.dataset_id = m.dataset_id\n336         GROUP BY d.territory_code, d.territory_name, d.year, m.category;\n337         \"\"\"\n338 \n",
      "col_offset": 29,
      "end_col_offset": 31,
      "filename": "src/database\\duckdb\\schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 321,
      "line_range": [
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "370         # Use UPSERT pattern for DuckDB\n371         upsert_sql = f\"\"\"\n372         INSERT INTO {table_name} (\n373             dataset_id, dataset_name, category, priority, subcategory,\n374             description, frequency, unit_of_measure, geographic_level,\n375             completeness_score, data_quality_score, processing_status,\n376             source_file_path, updated_at\n377         ) VALUES (\n378             ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n379         ) ON CONFLICT (dataset_id) DO UPDATE SET\n380             dataset_name = EXCLUDED.dataset_name,\n381             category = EXCLUDED.category,\n382             priority = EXCLUDED.priority,\n383             description = EXCLUDED.description,\n384             completeness_score = EXCLUDED.completeness_score,\n385             data_quality_score = EXCLUDED.data_quality_score,\n386             processing_status = EXCLUDED.processing_status,\n387             updated_at = EXCLUDED.updated_at;\n388         \"\"\"\n389 \n",
      "col_offset": 25,
      "end_col_offset": 20,
      "filename": "src/database\\duckdb\\schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 371,
      "line_range": [
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "486             insert_sql = (\n487                 f\"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})\"\n488             )\n",
      "col_offset": 18,
      "end_col_offset": 30,
      "filename": "src/database\\duckdb\\schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 487,
      "line_range": [
        487
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "510 \n511         stats_query = f\"\"\"\n512         SELECT\n513             'dataset_metadata' as table_name,\n514             COUNT(*) as row_count,\n515             COUNT(DISTINCT category) as categories,\n516             AVG(completeness_score) as avg_completeness\n517         FROM {schema}.dataset_metadata\n518 \n519         UNION ALL\n520 \n521         SELECT\n522             'istat_datasets' as table_name,\n523             COUNT(*) as row_count,\n524             COUNT(DISTINCT dataset_id) as categories,\n525             COUNT(DISTINCT year) as avg_completeness\n526         FROM {schema}.istat_datasets\n527 \n528         UNION ALL\n529 \n530         SELECT\n531             'istat_observations' as table_name,\n532             COUNT(*) as row_count,\n533             COUNT(DISTINCT dataset_id) as categories,\n534             AVG(obs_value) as avg_completeness\n535         FROM {schema}.istat_observations;\n536         \"\"\"\n537 \n",
      "col_offset": 26,
      "end_col_offset": 13,
      "filename": "src/database\\duckdb\\schema.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 511,
      "line_range": [
        511,
        512,
        513,
        514,
        515,
        516,
        517,
        518,
        519,
        520,
        521,
        522,
        523,
        524,
        525,
        526,
        527,
        528,
        529,
        530,
        531,
        532,
        533,
        534,
        535,
        536
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "297                     logger.warning(\n298                         f\"No valid fields to update for dataset {dataset_id}\"\n299                     )\n",
      "col_offset": 26,
      "end_col_offset": 64,
      "filename": "src/database\\sqlite\\dataset_config.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 298,
      "line_range": [
        298
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "305                 # Execute update\n306                 update_sql = f\"\"\"\n307                     UPDATE dataset_registry\n308                     SET {', '.join(update_fields)}\n309                     WHERE dataset_id = ?\n310                 \"\"\"\n311                 update_values.append(dataset_id)\n",
      "col_offset": 33,
      "end_col_offset": 24,
      "filename": "src/database\\sqlite\\dataset_config.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 306,
      "line_range": [
        306,
        307,
        308,
        309,
        310
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "330         except Exception as e:\n331             logger.error(f\"Failed to update dataset {dataset_id}: {e}\")\n332             return False\n",
      "col_offset": 27,
      "end_col_offset": 52,
      "filename": "src/database\\sqlite\\dataset_config.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 331,
      "line_range": [
        331
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "311                     query = (\n312                         \"UPDATE dataset_registry SET \"\n313                         + \", \".join(updates)\n314                         + \" WHERE dataset_id = ?\"\n",
      "col_offset": 24,
      "end_col_offset": 54,
      "filename": "src/database\\sqlite\\manager.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 312,
      "line_range": [
        312,
        313
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "323         except Exception as e:\n324             logger.error(f\"Failed to update dataset stats {dataset_id}: {e}\")\n325             return False\n",
      "col_offset": 27,
      "end_col_offset": 58,
      "filename": "src/database\\sqlite\\manager.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 324,
      "line_range": [
        324
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "999 \n1000             query = f\"UPDATE categorization_rules SET {', '.join(updates)} WHERE rule_id = ?\"\n1001 \n",
      "col_offset": 22,
      "end_col_offset": 54,
      "filename": "src/database\\sqlite\\manager.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1000,
      "line_range": [
        1000
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "554                 \"name\": star_schema.fact_table,\n555                 \"source\": \"SELECT * FROM {}\".format(\n556                     star_schema.fact_table\n",
      "col_offset": 26,
      "end_col_offset": 44,
      "filename": "src/integrations\\powerbi\\templates.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 555,
      "line_range": [
        555
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "8 import asyncio\n9 import xml.etree.ElementTree as ET\n10 from datetime import datetime\n",
      "col_offset": 0,
      "end_col_offset": 34,
      "filename": "src/services\\dataflow_analysis_service.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 9,
      "line_range": [
        9
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "244             try:\n245                 root = ET.fromstring(str(response_data))\n246                 # Use simple tag matching instead of XPath local-name() which isn't supported\n",
      "col_offset": 23,
      "end_col_offset": 56,
      "filename": "src/services\\dataflow_analysis_service.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 245,
      "line_range": [
        245
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "360         try:\n361             root = ET.fromstring(xml_content)\n362 \n",
      "col_offset": 19,
      "end_col_offset": 45,
      "filename": "src/services\\dataflow_analysis_service.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 361,
      "line_range": [
        361
      ],
      "more_info": "https://bandit.readthedocs.io/en/0.0.0/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    }
  ]
}